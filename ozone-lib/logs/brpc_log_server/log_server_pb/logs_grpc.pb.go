// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: logs.proto

package log_server_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LogUpdateService_UpdateRunResult_FullMethodName         = "/brpc_log_server.LogUpdateService/UpdateRunResult"
	LogUpdateService_ReceiveMainAppHeartbeat_FullMethodName = "/brpc_log_server.LogUpdateService/ReceiveMainAppHeartbeat"
)

// LogUpdateServiceClient is the client API for LogUpdateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogUpdateServiceClient interface {
	UpdateRunResult(ctx context.Context, in *RunResult, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReceiveMainAppHeartbeat(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type logUpdateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogUpdateServiceClient(cc grpc.ClientConnInterface) LogUpdateServiceClient {
	return &logUpdateServiceClient{cc}
}

func (c *logUpdateServiceClient) UpdateRunResult(ctx context.Context, in *RunResult, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, LogUpdateService_UpdateRunResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logUpdateServiceClient) ReceiveMainAppHeartbeat(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, LogUpdateService_ReceiveMainAppHeartbeat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogUpdateServiceServer is the server API for LogUpdateService service.
// All implementations must embed UnimplementedLogUpdateServiceServer
// for forward compatibility
type LogUpdateServiceServer interface {
	UpdateRunResult(context.Context, *RunResult) (*emptypb.Empty, error)
	ReceiveMainAppHeartbeat(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedLogUpdateServiceServer()
}

// UnimplementedLogUpdateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLogUpdateServiceServer struct {
}

func (UnimplementedLogUpdateServiceServer) UpdateRunResult(context.Context, *RunResult) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRunResult not implemented")
}
func (UnimplementedLogUpdateServiceServer) ReceiveMainAppHeartbeat(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveMainAppHeartbeat not implemented")
}
func (UnimplementedLogUpdateServiceServer) mustEmbedUnimplementedLogUpdateServiceServer() {}

// UnsafeLogUpdateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogUpdateServiceServer will
// result in compilation errors.
type UnsafeLogUpdateServiceServer interface {
	mustEmbedUnimplementedLogUpdateServiceServer()
}

func RegisterLogUpdateServiceServer(s grpc.ServiceRegistrar, srv LogUpdateServiceServer) {
	s.RegisterService(&LogUpdateService_ServiceDesc, srv)
}

func _LogUpdateService_UpdateRunResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogUpdateServiceServer).UpdateRunResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogUpdateService_UpdateRunResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogUpdateServiceServer).UpdateRunResult(ctx, req.(*RunResult))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogUpdateService_ReceiveMainAppHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogUpdateServiceServer).ReceiveMainAppHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogUpdateService_ReceiveMainAppHeartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogUpdateServiceServer).ReceiveMainAppHeartbeat(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// LogUpdateService_ServiceDesc is the grpc.ServiceDesc for LogUpdateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogUpdateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "brpc_log_server.LogUpdateService",
	HandlerType: (*LogUpdateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateRunResult",
			Handler:    _LogUpdateService_UpdateRunResult_Handler,
		},
		{
			MethodName: "ReceiveMainAppHeartbeat",
			Handler:    _LogUpdateService_ReceiveMainAppHeartbeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logs.proto",
}
